import os
Import('runtime')

# TODO(mcj) should this import a stripped-down environment from the SConstruct?
env = Environment(ENV = os.environ)
if GetOption('clang'):
    env['CC'] = 'clang'
    env['CXX'] = 'clang++'

env.Append(CPPPATH = [os.path.join(Dir('.').srcnode().up().abspath, 'include')])
env.Append(CPPFLAGS = ['-std=c++14', '-Wall', '-Werror', '-O3', '-gdwarf-3',])
env.Append(CPPDEFINES = ['NASSERT', 'NDEBUG'])

# FIXME(mcj) libsimalloc is identical for all runtimes, but libswarm differs per
# runtime. We should build the former only once.
libsimalloc = env.StaticLibrary(target='simalloc', source=['simalloc.cpp'])

swarmenv = env.Clone()
swarmenv.Append(CPPDEFINES = [
        (runtime.upper() if runtime in ['seq', 'tls', 'oracle'] else 'SWARM')
        + '_RUNTIME'
        ])

if runtime == 'seq':
    swarm_source = ['seq_tasks.cpp']
elif runtime == 'tls':
    swarm_source = ['tls_runtime.cpp', 'seq_tasks.cpp']
elif runtime == 'oracle':
    swarm_source = Glob('oracle_*.cpp')
else:
    assert runtime in ['swarm', 'scc', 'scc_serial', 'competition'], 'Unknown runtime'
    swarm_source = []
libswarm = swarmenv.StaticLibrary(target='swarm', source=swarm_source) if swarm_source else None

Return('libswarm', 'libsimalloc')
